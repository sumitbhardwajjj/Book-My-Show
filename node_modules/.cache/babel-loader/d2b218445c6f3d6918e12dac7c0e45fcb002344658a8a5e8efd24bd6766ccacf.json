{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91983\\\\Documents\\\\BookMySchool\\\\book-my-show\\\\src\\\\Context\\\\BsState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport BsContext from \"./BsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BsState = props => {\n  _s();\n  const [time, changeTime] = useState(\"\"); // time slot which the user selects.\n  const [movie, changeMovie] = useState(\"\"); // Movie which the user selects.\n  const [lastBookingDatas, setLastBookingData] = useState(null); // Last movie booking details.\n  const [noOfSeat, changeNoOfSeats] = useState({\n    A1: 0,\n    A2: 0,\n    A3: 0,\n    A4: 0,\n    D1: 0,\n    D2: 0\n  }); // No of seats which the user selects.\n\n  // handling post request to save booking details on the backend\n  const handlePostBooking = async () => {\n    // Sending api request to backend with user selected movie, slot and seats to book movie.\n    try {\n      const res = await fetch(`https://bookmyshow-backend-main.onrender.com/api/booking`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          movie: movie,\n          slot: time,\n          seats: noOfSeat\n        })\n      });\n      const data = await res.json();\n      if (res.status === 200) {\n        //reset the state on success\n        changeTime(\"\");\n        changeMovie(\"\");\n        changeNoOfSeats({\n          A1: 0,\n          A2: 0,\n          A3: 0,\n          A4: 0,\n          D1: 0,\n          D2: 0\n        });\n        setLastBookingData(data.data);\n        //clearing the local storage when booking is successfull\n        window.localStorage.clear();\n      }\n    } catch (error) {\n      console.log(\"error\", error);\n      return false;\n    }\n    //showing message from backend on popup to user whether success or error\n  };\n\n  useEffect(() => {\n    //getting movies, slot and seats from localstorage and updating state (useful when page refreshes)\n    const movie = window.localStorage.getItem(\"movie\");\n    const slot = window.localStorage.getItem(\"slot\");\n    const seats = JSON.parse(window.localStorage.getItem(\"seats\"));\n    if (movie || slot || seats) {\n      changeMovie(movie);\n      changeTime(slot);\n      changeNoOfSeats(seats);\n    }\n  }, []);\n  return (\n    /*#__PURE__*/\n    // providing all the required data to app\n    _jsxDEV(BsContext.Provider, {\n      value: {\n        handlePostBooking,\n        movie,\n        changeMovie,\n        time,\n        changeTime,\n        noOfSeat,\n        changeNoOfSeats,\n        lastBookingDatas\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(BsState, \"ah1OSWgT8Hq7zAsV2t+5XcPPcmQ=\");\n_c = BsState;\nexport default BsState;\nvar _c;\n$RefreshReg$(_c, \"BsState\");","map":{"version":3,"names":["React","useState","useEffect","BsContext","BsState","props","time","changeTime","movie","changeMovie","lastBookingDatas","setLastBookingData","noOfSeat","changeNoOfSeats","A1","A2","A3","A4","D1","D2","handlePostBooking","res","fetch","method","headers","body","JSON","stringify","slot","seats","data","json","status","window","localStorage","clear","error","console","log","getItem","parse","children"],"sources":["C:/Users/91983/Documents/BookMySchool/book-my-show/src/Context/BsState.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport BsContext from \"./BsContext\";\r\n\r\nconst BsState = (props) => {\r\n  const [time, changeTime] = useState(\"\");                // time slot which the user selects.\r\n  const [movie, changeMovie] = useState(\"\");              // Movie which the user selects.\r\n  const [lastBookingDatas, setLastBookingData] = useState(null);  // Last movie booking details.\r\n  const [noOfSeat, changeNoOfSeats] = useState({\r\n    A1: 0,\r\n    A2: 0,\r\n    A3: 0,\r\n    A4: 0,\r\n    D1: 0,\r\n    D2: 0,\r\n  });  // No of seats which the user selects.\r\n\r\n  // handling post request to save booking details on the backend\r\n  const handlePostBooking = async () => {\r\n    // Sending api request to backend with user selected movie, slot and seats to book movie.\r\n    try {\r\n        \r\n        const res = await fetch(\r\n          `https://bookmyshow-backend-main.onrender.com/api/booking`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ movie: movie, slot: time, seats: noOfSeat }),\r\n          }\r\n        );\r\n        const data = await res.json();\r\n        if (res.status === 200) {\r\n          //reset the state on success\r\n          changeTime(\"\");\r\n          changeMovie(\"\");\r\n          changeNoOfSeats({\r\n            A1: 0,\r\n            A2: 0,\r\n            A3: 0,\r\n            A4: 0,\r\n            D1: 0,\r\n            D2: 0,\r\n          });\r\n          setLastBookingData(data.data);\r\n          //clearing the local storage when booking is successfull\r\n          window.localStorage.clear();\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.log(\"error\", error);\r\n        return false\r\n    }\r\n    //showing message from backend on popup to user whether success or error\r\n  };\r\n\r\n  useEffect(() => {\r\n    //getting movies, slot and seats from localstorage and updating state (useful when page refreshes)\r\n    const movie = window.localStorage.getItem(\"movie\");\r\n    const slot = window.localStorage.getItem(\"slot\");\r\n    const seats = JSON.parse(window.localStorage.getItem(\"seats\"));\r\n\r\n    if(movie || slot || seats){\r\n      changeMovie(movie);\r\n      changeTime(slot);\r\n      changeNoOfSeats(seats);\r\n    }\r\n\r\n  }, []);\r\n\r\n  return (\r\n    // providing all the required data to app\r\n    <BsContext.Provider \r\n      value={{\r\n        handlePostBooking,\r\n        movie,\r\n        changeMovie,\r\n        time,\r\n        changeTime,\r\n        noOfSeat,\r\n        changeNoOfSeats,\r\n        lastBookingDatas,\r\n      }}>\r\n      {props.children}\r\n    </BsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BsState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}